// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: client_stream.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientStreamGo_RouteList_FullMethodName = "/ClientStream_go/RouteList"
)

// ClientStreamGoClient is the client API for ClientStreamGo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStreamGoClient interface {
	RouteList(ctx context.Context, opts ...grpc.CallOption) (ClientStreamGo_RouteListClient, error)
}

type clientStreamGoClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamGoClient(cc grpc.ClientConnInterface) ClientStreamGoClient {
	return &clientStreamGoClient{cc}
}

func (c *clientStreamGoClient) RouteList(ctx context.Context, opts ...grpc.CallOption) (ClientStreamGo_RouteListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientStreamGo_ServiceDesc.Streams[0], ClientStreamGo_RouteList_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamGoRouteListClient{stream}
	return x, nil
}

type ClientStreamGo_RouteListClient interface {
	Send(*ClientStreamRequest) error
	CloseAndRecv() (*ClientStreamResponse, error)
	grpc.ClientStream
}

type clientStreamGoRouteListClient struct {
	grpc.ClientStream
}

func (x *clientStreamGoRouteListClient) Send(m *ClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamGoRouteListClient) CloseAndRecv() (*ClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamGoServer is the server API for ClientStreamGo service.
// All implementations must embed UnimplementedClientStreamGoServer
// for forward compatibility
type ClientStreamGoServer interface {
	RouteList(ClientStreamGo_RouteListServer) error
	mustEmbedUnimplementedClientStreamGoServer()
}

// UnimplementedClientStreamGoServer must be embedded to have forward compatible implementations.
type UnimplementedClientStreamGoServer struct {
}

func (UnimplementedClientStreamGoServer) RouteList(ClientStreamGo_RouteListServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteList not implemented")
}
func (UnimplementedClientStreamGoServer) mustEmbedUnimplementedClientStreamGoServer() {}

// UnsafeClientStreamGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamGoServer will
// result in compilation errors.
type UnsafeClientStreamGoServer interface {
	mustEmbedUnimplementedClientStreamGoServer()
}

func RegisterClientStreamGoServer(s grpc.ServiceRegistrar, srv ClientStreamGoServer) {
	s.RegisterService(&ClientStreamGo_ServiceDesc, srv)
}

func _ClientStreamGo_RouteList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamGoServer).RouteList(&clientStreamGoRouteListServer{stream})
}

type ClientStreamGo_RouteListServer interface {
	SendAndClose(*ClientStreamResponse) error
	Recv() (*ClientStreamRequest, error)
	grpc.ServerStream
}

type clientStreamGoRouteListServer struct {
	grpc.ServerStream
}

func (x *clientStreamGoRouteListServer) SendAndClose(m *ClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamGoRouteListServer) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamGo_ServiceDesc is the grpc.ServiceDesc for ClientStreamGo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStreamGo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientStream_go",
	HandlerType: (*ClientStreamGoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteList",
			Handler:       _ClientStreamGo_RouteList_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "client_stream.proto",
}
