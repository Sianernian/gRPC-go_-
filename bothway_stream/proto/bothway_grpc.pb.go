// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: bothway.proto

package bothway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BothWayTale_Cover_FullMethodName = "/BothWayTale/cover"
)

// BothWayTaleClient is the client API for BothWayTale service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BothWayTaleClient interface {
	Cover(ctx context.Context, opts ...grpc.CallOption) (BothWayTale_CoverClient, error)
}

type bothWayTaleClient struct {
	cc grpc.ClientConnInterface
}

func NewBothWayTaleClient(cc grpc.ClientConnInterface) BothWayTaleClient {
	return &bothWayTaleClient{cc}
}

func (c *bothWayTaleClient) Cover(ctx context.Context, opts ...grpc.CallOption) (BothWayTale_CoverClient, error) {
	stream, err := c.cc.NewStream(ctx, &BothWayTale_ServiceDesc.Streams[0], BothWayTale_Cover_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bothWayTaleCoverClient{stream}
	return x, nil
}

type BothWayTale_CoverClient interface {
	Send(*BothwayRequest) error
	Recv() (*BothwayResponse, error)
	grpc.ClientStream
}

type bothWayTaleCoverClient struct {
	grpc.ClientStream
}

func (x *bothWayTaleCoverClient) Send(m *BothwayRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bothWayTaleCoverClient) Recv() (*BothwayResponse, error) {
	m := new(BothwayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BothWayTaleServer is the server API for BothWayTale service.
// All implementations must embed UnimplementedBothWayTaleServer
// for forward compatibility
type BothWayTaleServer interface {
	Cover(BothWayTale_CoverServer) error
	mustEmbedUnimplementedBothWayTaleServer()
}

// UnimplementedBothWayTaleServer must be embedded to have forward compatible implementations.
type UnimplementedBothWayTaleServer struct {
}

func (UnimplementedBothWayTaleServer) Cover(BothWayTale_CoverServer) error {
	return status.Errorf(codes.Unimplemented, "method Cover not implemented")
}
func (UnimplementedBothWayTaleServer) mustEmbedUnimplementedBothWayTaleServer() {}

// UnsafeBothWayTaleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BothWayTaleServer will
// result in compilation errors.
type UnsafeBothWayTaleServer interface {
	mustEmbedUnimplementedBothWayTaleServer()
}

func RegisterBothWayTaleServer(s grpc.ServiceRegistrar, srv BothWayTaleServer) {
	s.RegisterService(&BothWayTale_ServiceDesc, srv)
}

func _BothWayTale_Cover_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BothWayTaleServer).Cover(&bothWayTaleCoverServer{stream})
}

type BothWayTale_CoverServer interface {
	Send(*BothwayResponse) error
	Recv() (*BothwayRequest, error)
	grpc.ServerStream
}

type bothWayTaleCoverServer struct {
	grpc.ServerStream
}

func (x *bothWayTaleCoverServer) Send(m *BothwayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bothWayTaleCoverServer) Recv() (*BothwayRequest, error) {
	m := new(BothwayRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BothWayTale_ServiceDesc is the grpc.ServiceDesc for BothWayTale service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BothWayTale_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BothWayTale",
	HandlerType: (*BothWayTaleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "cover",
			Handler:       _BothWayTale_Cover_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bothway.proto",
}
