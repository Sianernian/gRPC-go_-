// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: simple.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimpleSay_Route_FullMethodName = "/SimpleSay/Route"
)

// SimpleSayClient is the client API for SimpleSay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleSayClient interface {
	Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type simpleSayClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleSayClient(cc grpc.ClientConnInterface) SimpleSayClient {
	return &simpleSayClient{cc}
}

func (c *simpleSayClient) Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, SimpleSay_Route_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleSayServer is the server API for SimpleSay service.
// All implementations must embed UnimplementedSimpleSayServer
// for forward compatibility
type SimpleSayServer interface {
	Route(context.Context, *SimpleRequest) (*SimpleResponse, error)
	mustEmbedUnimplementedSimpleSayServer()
}

// UnimplementedSimpleSayServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleSayServer struct {
}

func (UnimplementedSimpleSayServer) Route(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedSimpleSayServer) mustEmbedUnimplementedSimpleSayServer() {}

// UnsafeSimpleSayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleSayServer will
// result in compilation errors.
type UnsafeSimpleSayServer interface {
	mustEmbedUnimplementedSimpleSayServer()
}

func RegisterSimpleSayServer(s grpc.ServiceRegistrar, srv SimpleSayServer) {
	s.RegisterService(&SimpleSay_ServiceDesc, srv)
}

func _SimpleSay_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleSayServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleSay_Route_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleSayServer).Route(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleSay_ServiceDesc is the grpc.ServiceDesc for SimpleSay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleSay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SimpleSay",
	HandlerType: (*SimpleSayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _SimpleSay_Route_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple.proto",
}
